{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKE,cAAc,kBAChCE,EAAYJ,EAAKE,cAAc,iBAC/BG,EAAcL,EAAKE,cAAc,mBAiCvC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAzCPR,EAAKgB,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAEC,iBAEF,IAAIV,EAAQW,OAAOhB,EAAWiB,OAC1BC,EAAOF,OAAOf,EAAUgB,QAM9B,SAAwBE,EAAQC,EAAYF,GAC1C,IAAK,IAAIG,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAI/BlB,EAHiBkB,EAAI,EACPD,EAAaC,EAAIH,GAG5BI,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBmB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGjDuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,KAhBnDyB,CAFad,OAAOd,EAAYe,OAETZ,EAAOa,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = form.querySelector('[name=\"delay\"]');\nconst stepInput = form.querySelector('[name=\"step\"]');\nconst amountInput = form.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  let delay = Number(delayInput.value);\n  let step = Number(stepInput.value);\n  let amount = Number(amountInput.value);\n\n  createPromises(amount, delay, step);\n}\n\nfunction createPromises(amount, firstDelay, step) {\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const delay = firstDelay + i * step;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","Number","value","step","amount","firstDelay","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.cc60b4ce.js.map"}